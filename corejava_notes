
  
    java:
	
	
	 ->programming languages
	 
	     pop
		 oop
		 mop
		 sop
		 ...
		 
	 
	 ->to make the software/application
	 
	 ->object oriented programming language
	 
	 ->using java what applications we can develop?
	 
	 
	 
	  we have two types of applciations
	  
	  
	    ->standalone applications/desktop applications -results are not sharable
		->distributed applications-results are sharable across the globe
		gmail.com
		facebook.com etc..
		
		
	 
	 jamesgosling -> in three editions
	 
	  jse->java standard edition --> standalone applications
	  jee->java enterprise edition -> distributed applications & standalone apps
	  jme->java micro/mobile edition -> 
	 
	 
if any requirement -> 

   program -> set of instructions

every programmer must follow some rules/syntaxes -> 

     
java -> sunmicrosystem 
     -> oracle 

	 
	 <datatype> <variablename>=<value>;
	 
	 

for java program, there is basic structure

 
  every java program must starts with by defining a class.
  
  
  without defining a class there is no java program .
  
  
  syntax:
     
	   class <classname>
	   {   
	      
	      public static void main(String[] args)
		  {
		    //logic
		  }
		  
	   }

note: java is case senstive programming language.

note: every java reserved keyword must be in lowercase.

note: without defining the main(), we can compile the program, but we can't run 
      the program because execution of java program should starts from main().
	  
	  

  i want to write the java program?
  
    prerequisites to write the java program?
	
	1.download the java software(jdk)->open source
	
	2.install this software
	
	3.select the editor(notepad,notepad++,eclipse,netbeans,intellij)
	
	4.write the java program 
	
    5.save the java program (<filename>.java)
	
	6.compile the java program (javac <filename>.java)
	
	7.run the java program (java <classname>)
	
	
why should we go for compiling the java program?

  java compiler will check for all the syntaxes
  
  java compiler -> compiletime error
  
  java compiler -> will generate .class file
  
  .java file contains source code
  .class file contains byte code
  
  byte code:
  
    byte code can not be understandable by human 
  
    byte code can be understandable by jvm(java interpretor)
	
	  jvm -> byte code and converts it into machine level code 
	  
	  
java compiler -> compiles the program (Checking the syntaxes)
java interpretor(jvm) -> executes the program (converting bytecode to machine level code)

 
in java, to display any information in the console one statement we have to use?

    System.out.println("welcome to java"); 
    

to compile 
   
    javac Welcome.java

to execute

     java <classname>
	 java Infosys
	 
	 
open the command prompt


in real world , we never use these basic editors to develop the programs

ide's ->integrated development environment


 eclipse
 myeclipse
 intellij
 netbeans
 bluej
 visualstudio
 ...
 
how to download and install the eclipse in your mahines?

note:
the code which we are writing in the ide is autocompiled


   jdk vs jre vs jvm
   
   
java development kit

   it provides two environments
   
         -dev environment(develop the java programs)
		 -runtime environment(execute the java programs)
		 
		 
jre:
   java runtime environment

      ->runtime environment (only we are able to execute the java applications)
	  
	  
jvm:
   java virtual machine

   
	 ->using this we can develop the actual java program
	 
	 
	 
'every java program should starts with by defining class 

  class <classname>
  {
   //variables

   //methods

  }   
	 
	 
variable:
``````````
variable is used to store the data

  it is a name which we are giving to memory location .

syntax:
  
   <datatypename> <variablename> = <value>;

  int x=100;  

  int 100=100;-invalid

  int int =100;//invalid

  int _xyz=100;

  int x123 =100;

  int 123x=100;

  int $xyz=123;

  int xyz*123=100;  
	 
	 
A variable name can consist of Capital letters A-Z, lowercase letters a-z digits 0-9, and two special characters such as _ underscore and $ dollar sign.

The first character must not be a digit.

Blank spaces cannot be used in variable names.

Java keywords cannot be used as variable names.

Variable names are case-sensitive.

There is no limit on the length of a variable name but by convention, it should be between 4 to 15 chars.

Variable names always should exist on the left-hand side of assignment operators.	 

example:
`````````


public class Welcome {
	
	public static void main(String[] args) {
		
		int x=100;
		//int int =100;
		int _xyz=123;
		
		int $xyz=123;
		byte b1 = 127;
		
		float f = 12.3467676f;
		double d = 56.6776565656556656;
		char c = 'a';//2 bytes
		boolean b =true;
		
		//int xyz abc = 123;
		//int xyz*123=12;
		//int 1xyz=123;
		
	}

}






Primitive Data Type: In Java, the primitive data types are the predefined data types of Java. They specify the size and type of any standard values. Java has 8 primitive data types namely byte, short, int, long, float, double, char and boolean.


datatypes in java:

   4 types 
   
    integer 
	   byte
	   short
	   int
	   long
	   
	float 
	   float
	   double
	   
	charcter
	   char
	   
	boolean 
	   boolean (true/false)
	   
	
based on the value and the range will decide a specific datatype

every datatype is having 
 their own memory size and range 
 
  
  int x = 100;(4 bytes)
  
  
byte datatype -> 1 byte -> 8 bits


 -2^n-1 to 2^n-1 -1
 
 -2^7 to 2^7 -1
 
 -128 to 127
 
  byte b = 130;
  
 
usually float datatypes we are using to store decimal values
by default decimal data can be considerd as double type 

 
float f = 23.45f;
	 
	 
	 
method:
````````
method is the place where we are writing the logic to perform some operations 
based on the requirement.



syntax:

  
     [accessmodifier] <returntype> <methodname>([paramters if any])
	 {
	 
	     //logic
	 }


ex:
     public void sum(int x, int y)
	 {
	   System.out.println("sum is: " +(x+y));
	 }
	 

note:
if a method is not returning any value , we have to specify returntype as 
void


 int getSalary()
{
  return 50000;
}


note:
return value and retuntype must be compatible otherwise we will get 
compiletme error.


System.out.println(getSalary());
//output as 50000



int getSum(int x, int y)
{
  return x+y;
}

   getSum(4,5);

Hungarian notation /camelcase notation:

recommendation:
 
 getAge()
 getStudentInfo()
 getSalary()
 getThreadStatus()
 setMarks();
 
example:
`````````

public class Demo {
	
	
	static byte b=100;
	public static void display()
	{
		System.out.println("byte value is " + b);
	}
	
	public static void main(String[] args) {
		//calling the method
		display();
		
	}

}

example:
`````````

public class Demo {
	
	
	
	public static int getSum(int x, int y)
	{
		return x+y;
	}
	
	public static void main(String[] args) {
		int result = getSum(120,345);
		
		System.out.println("sum is : " + result);
		
	}

}



instance vs static:
```````````````````


     why java is oop language?
	 
	 answer: since it follows oops principles.
	 
	 oops principles: 
	  
	   we have 4 oops principles
	   
	 who derived these oops principles?

          omg(object management group)
          candian organization 
		  
	     
		  
java is one of the object oriented programming language.
.net,python,php..


  inheritance
  polymorphism
  abstraction 
  encapsulation 
  
  
 in java, how can we achieve these principles?

  we have two concepts

  1.class
  2.object

  
 object: 
  
  note:
  
  when we define a class, memory spaces will not be allocated
  for datamembers.
  
  we should go for creating the object
  
  
  for a single class, how many object(s) we can create?
  
   as many as we want based on the requirement.
   
   in a college, 
      -> 1000 students
	  
Student anita = new Student();	  
  
  
object:
```````` 
  instance of a class is known as object.
  
  instance: allocating sufficient amount of memory space for the non-static
            data members which we are declaring inside the class.
			
			
syntax:
```````
   <classname> <objectname> = new <classname>();
   Student anita = new Student();

   new -> dynamic memory allocation operator
   
example:
`````````

public class Demo {
	
	int x=200;
	public void display()
	{
		System.out.println("integer value is : " + x);
	}

	public static void main(String[] args) {
		
		
		//creating the object
		
		
		Demo obj = new Demo();
		
		System.out.println("integer value is : " + obj.x);
		
		obj.display();
		
		
	}

}

note:
````
using . operator we are able to access class level datamembers.

   
  
  
  
 instance vs static:

instance  -> non static 
static -> static


 int x;
 static int x;
 
 
note:
to make any property as staic we should add static keyword before method or variable
declaration.

 public void m1()
 {
  //instance area 
 }
 
 public static void m2()
 {
   //static area
 }
  
  
  the area which belongs to non-static /instance method is known as 
  instance area
  
  the area which belongs to static method is known as static area
  
  
note:
`````
for non static/instance properties memory will be created whenever we create
the object.


note:
`````
from static area to access instance properties using object name it is possible.
from static area to access static properties we have threee possibilities

   1.using class name
   2.diretly we can access
   3.using object name(it is not recommended)
  
if you define any property as static, memory will be created only once 
at the class loading time before object creation.


note:
from the instance area , we can access instance properties directly 
and as well as staic proeprties using class name or directly.



example:
```````

public class Student {
	//instance properties
	int stid=100;
	String stname="Ram";
	
	//static property
	static String collegeName="cbit";
	
	//instance method
	public void display()
	{
		//instance area
		System.out.println("student id: " + stid);
		System.out.println("student name: " + stname);
		System.out.println("student collegename: " + collegeName);
		
	}
	
	
	public static void main(String[] args) {
		//static area
		Student st1 = new Student();
		System.out.println("student id: " + st1.stid);
		System.out.println("student name: " + st1.stname);
		System.out.println("college name: " +collegeName);
		System.out.println("===================");
		
		st1.display();
		
		
	}

}


public static void main(String[] abc)
{
}

why main() method is taking array of String as an argument?
 -> 










	 
	 
	 
	 
	 